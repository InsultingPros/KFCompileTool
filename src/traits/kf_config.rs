use crate::{RuntimeVariables, errors::CompileToolErrors};
use std::fmt::Write as _;

/// config name
pub const COMPILATION_CONFIG_NAME: &str = "kfcompile.ini";
/// included minimal kf.ini for ucc.exe
const COMPILATION_CONFIG_TEMPLATE: &str = r";= WARNING! This file is generated by kf_compile_tool and and is meant to be one time use.
[Engine.Engine]
EditorEngine=Editor.EditorEngine

[Core.System]
CacheRecordPath=../System/*.ucl
Paths=../System/*.u
Paths=../Maps/*.rom
Paths=../TestMaps/*.rom
Paths=../Textures/*.utx
Paths=../Sounds/*.uax
Paths=../Music/*.umx
Paths=../StaticMeshes/*.usx
Paths=../Animations/*.ukx
Paths=../Saves/*.uvx
Paths=../Textures/Old2k4/*.utx
Paths=../Sounds/Old2k4/*.uax
Paths=../Music/Old2k4/*.umx
Paths=../StaticMeshes/Old2k4/*.usx
Paths=../Animations/Old2k4/*.ukx
Paths=../KarmaData/Old2k4/*.ka
Suppress=DevLoad
Suppress=DevSave

[ROFirstRun]
ROFirstRun=1094

[Editor.EditorEngine]
EditPackages=Core
EditPackages=Engine
EditPackages=Fire
EditPackages=Editor
EditPackages=UnrealEd
EditPackages=IpDrv
EditPackages=UWeb
EditPackages=GamePlay
EditPackages=UnrealGame
EditPackages=XGame
EditPackages=XInterface
EditPackages=XAdmin
EditPackages=XWebAdmin
EditPackages=GUI2K4
EditPackages=xVoting
EditPackages=UTV2004c
EditPackages=UTV2004s
EditPackages=ROEffects
EditPackages=ROEngine
EditPackages=ROInterface
EditPackages=Old2k4
EditPackages=KFMod
EditPackages=KFChar
EditPackages=KFGui
EditPackages=GoodKarma
EditPackages=KFMutators
EditPackages=KFStoryGame
EditPackages=KFStoryUI
EditPackages=SideShowScript
EditPackages=FrightScript
";

pub trait KFConfig {
    /// Creates temporary kf.ini for compilation and adds required `Editpackages`.
    /// # Errors
    /// _
    fn create_kf_config(&self) -> Result<(), CompileToolErrors>;
    /// Remove our temporary compilation `kf.ini`.
    /// # Errors
    /// _
    fn remove_kf_config(&self) -> Result<(), CompileToolErrors>;
}

impl KFConfig for RuntimeVariables {
    fn create_kf_config(&self) -> Result<(), CompileToolErrors> {
        let mut new_content: String = COMPILATION_CONFIG_TEMPLATE.to_string();

        for package in self.mod_settings.edit_packages.as_ref() {
            // dbg!(package);
            writeln!(&mut new_content, "EditPackages={package}")?;
        }

        std::fs::write(
            self.paths.compile_dir_system.join(COMPILATION_CONFIG_NAME),
            &new_content,
        )?;

        Ok(())
    }

    fn remove_kf_config(&self) -> Result<(), CompileToolErrors> {
        if self.paths.temp_kf_ini.try_exists()? {
            std::fs::remove_file(&self.paths.temp_kf_ini)?;
        }

        Ok(())
    }
}
